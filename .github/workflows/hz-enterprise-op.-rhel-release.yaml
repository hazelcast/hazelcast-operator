name: hz-enterprise-operator-rhel-autorelease
on:
  workflow_dispatch:
    inputs:
      OPERATOR_VERSION:
        description: 'OPERATOR_VERSION'     
        required: true
        default: '0.3.3'
      PREVIOUS_OPERATOR_VERSION:
        description: 'PREVIOUS_OPERATOR_VERSION'     
        required: true
        default: '0.3.2' 
      HELM_CHART_VERSION:
        description: 'HELM_CHART_VERSION'     
        required: true
        default: '3.5.0'
      DEFAULT_HAZELCAST_VERSION:
        description: 'DEFAULT_HAZELCAST_VERSION'     
        required: true
        default: '4.0.3'
      DEFAULT_MANCENTER_VERSION:
        description: 'DEFAULT_MANCENTER_VERSION'     
        required: true
        default: '4.2020.08'

jobs:
  build:
    defaults:
      run:
        shell: bash
    env:
      OPERATOR_SDK_VERSION: "v0.17.2"
      KIND: "HazelcastEnterprise"
      NAME: "hazelcast-enterprise"
      REPO: "rhel"
      OPERATOR_VERSION: ${{ github.event.inputs.OPERATOR_VERSION }}
      PREVIOUS_OPERATOR_VERSION: ${{ github.event.inputs.PREVIOUS_OPERATOR_VERSION }}
      HELM_CHART_VERSION: ${{ github.event.inputs.HELM_CHART_VERSION }}
      DEFAULT_HAZELCAST_VERSION: ${{ github.event.inputs.DEFAULT_HAZELCAST_VERSION }}
      DEFAULT_MANCENTER_VERSION: ${{ github.event.inputs.DEFAULT_MANCENTER_VERSION }}
      HZ_ENTERPRISE_LICENSE: ${{ secrets.HZ_ENTERPRISE_LICENSE }}
      RHEL_REPO_PASSWORD: ${{ secrets.RHEL_REPO_PASSWORD }}
      RHEL_BUNDLE_PASSWORD: ${{ secrets.RHEL_BUNDLE_PASSWORD }}
      RHEL_REPOSITORY: ${{ secrets.RHEL_REPOSITORY }}
      RHEL_BUNDLE_REPOSITORY: ${{ secrets.RHEL_BUNDLE_REPOSITORY }}
      RHEL_API_KEY:  ${{ secrets.RHEL_API_KEY }}

    runs-on: ubuntu-20.04
    steps: 
      - name: Check Docker 
        run: docker --version


      - name: Install Operator-Sdk
        run: |
          sudo curl -L -o /operator-sdk "https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu"
          sudo chmod +x /operator-sdk
          /operator-sdk version


      - name: Install oc
        run: |
          curl -L -o ./oc.tar.gz "https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz"
          tar xvzf oc.tar.gz
          rm oc.tar.gz
          sudo mv oc /oc
          /oc version


      - name: Install opm
        run: |
          set -x
          sudo apt-get update
          sudo apt-get install --only-upgrade libc6
          /oc image extract quay.io/openshift/origin-operator-registry:4.6.0 --path /usr/bin/opm:. --confirm
          chmod +x ./opm
          sudo mv opm /opm
          /opm version


      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v2
        with:
          path: operator-repo


      - name: Download Hazelcast Helm Chart
        run: |
          mkdir WORKDIR
          cd WORKDIR
          if [ $(wget -q "https://hazelcast-charts.s3.amazonaws.com/${NAME}-${HELM_CHART_VERSION}.tgz" ; echo $? = "0") ]; then 
            echo "${NAME}-${HELM_CHART_VERSION} chart is downloaded!" 
          else 
            echo "${NAME}-${HELM_CHART_VERSION} chart could not be downloaded!" 
          fi 
          tar xf ${NAME}-${HELM_CHART_VERSION}.tgz
          rm ${NAME}-${HELM_CHART_VERSION}.tgz
      

      - name: Overwrite template values
        working-directory: ./WORKDIR
        run: |
          function run_sed_i {
            SED_SCRIPT=$1
            FILE=$2
            sed -i'' "$1" $2
          } 
          cat <<'EOF' > new_image_block
                  {{- if and (.Values.image.repository ) (.Values.image.tag) }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  {{- else }}
                  image: "{{ .Values.image.repositoryOverride }}:{{ .Values.image.tagOverride }}"
                  {{- end }}
          EOF
          run_sed_i '/image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"/d' ${NAME}/templates/statefulset.yaml 2>/dev/null
          run_sed_i '/- name: {{ template "hazelcast.fullname" . }}/r new_image_block' ${NAME}/templates/statefulset.yaml 2>/dev/null
          rm new_image_block
          cat <<'EOF' > new_mc_image_block
                  {{- if and (.Values.mancenter.image.repository ) (.Values.mancenter.image.tag) }}
                  image: "{{ .Values.mancenter.image.repository }}:{{ .Values.mancenter.image.tag }}"
                  {{- else }}
                  image: "{{ .Values.mancenter.image.repositoryOverride }}:{{ .Values.mancenter.image.tagOverride }}"
                  {{- end }}
          EOF
          run_sed_i '/image: "{{ .Values.mancenter.image.repository }}:{{ .Values.mancenter.image.tag }}"/d' ${NAME}/templates/mancenter-statefulset.yaml 2>/dev/null
          run_sed_i '/- name: {{ template "mancenter.fullname" . }}/r new_mc_image_block' ${NAME}/templates/mancenter-statefulset.yaml 2>/dev/null
          rm new_mc_image_block

          run_sed_i 's/repository/repositoryOverride/g' ${NAME}/values.yaml 2>/dev/null
          run_sed_i 's/tag/tagOverride/g' ${NAME}/values.yaml 2>/dev/null


      - name: Upload Helm Charts
        uses: actions/upload-artifact@v2
        with:
          name: updated-helm-charts
          path: ./WORKDIR/hazelcast-enterprise


      - name: Generate Operator and Operator Image
        working-directory: ./WORKDIR
        run: |
          OPERATOR_NAME="${NAME}-operator"
          OPERATOR_REPOSITORY="hazelcast/${OPERATOR_NAME}"
          OPERATOR_IMAGE="${OPERATOR_REPOSITORY}:${OPERATOR_VERSION}"
          RHEL_IMAGE=${RHEL_REPOSITORY}:${OPERATOR_VERSION}
          RHEL_BUNDLE_IMAGE=${RHEL_BUNDLE_REPOSITORY}:${OPERATOR_VERSION}

          echo "OPERATOR_NAME=${OPERATOR_NAME}" >> $GITHUB_ENV
          echo "OPERATOR_REPOSITORY=${OPERATOR_REPOSITORY}" >> $GITHUB_ENV
          echo "OPERATOR_IMAGE=${OPERATOR_IMAGE}" >> $GITHUB_ENV
          echo "RHEL_IMAGE=${RHEL_IMAGE}" >> $GITHUB_ENV
          echo "RHEL_BUNDLE_IMAGE=${RHEL_BUNDLE_IMAGE}" >> $GITHUB_ENV

          /operator-sdk new ${OPERATOR_NAME} --api-version=hazelcast.com/v1alpha1 --type=helm --kind=${KIND} --helm-chart=$(pwd)/${NAME}
          cd ${OPERATOR_NAME}

          cat >> watches.yaml <<EOL
            overrideValues:
              image.repositoryOverride: \${HAZELCAST_IMAGE_REPOSITORY}
              image.tagOverride: \${HAZELCAST_IMAGE_TAG}
              mancenter.image.repositoryOverride: \${MC_IMAGE_REPOSITORY}
              mancenter.image.tagOverride: \${MC_IMAGE_TAG}
          EOL

          cp -r ../../operator-repo/.github/operator-release-files/licenses ./

          cat >> ./build/Dockerfile <<EOL
          LABEL name="Hazelcast-Enterprise Operator" \\
                maintainer="connect-tech@redhat.com" \\
                vendor="RHC" \\
                version="${OPERATOR_VERSION}" \\
                release="v1" \\
                summary="Hazelcast Enterprise Operator" \\
                description="Helm App Operator for Hazelcast"

          ADD licenses /licenses
          EOL

          echo "Building the operator image ${OPERATOR_IMAGE}"
          /operator-sdk build ${OPERATOR_IMAGE}

          sed -i -e "s|REPLACE_IMAGE|${OPERATOR_IMAGE}|g" ./deploy/operator.yaml


      - name: Update Hazelcast Enterprise Operator files
        run: |
          cp -r ./operator-repo/${OPERATOR_NAME}  ./

          REGISTRY_NAME=registry.connect.redhat.com/hazelcast
          sed -i -e  "s|image: ${REGISTRY_NAME}/${OPERATOR_NAME}:.*|image: ${REGISTRY_NAME}/${OPERATOR_NAME}:${OPERATOR_VERSION}|" ./${OPERATOR_NAME}/operator-rhel.yaml
          sed -i -e  "s/imagePullPolicy: .*/imagePullPolicy: Never/g" ./${OPERATOR_NAME}/operator-rhel.yaml
          sed -i -e  "s/productVersion: .*/productVersion: ${OPERATOR_VERSION}/g" ./${OPERATOR_NAME}/operator-rhel.yaml

          sed -i -e "0,/tag: .*/s//tag: ${DEFAULT_HAZELCAST_VERSION}/" ./${OPERATOR_NAME}/hazelcast.yaml
          sed -i -e "0,/tag: /! s/tag: .*/tag: ${DEFAULT_MANCENTER_VERSION}/" ./${OPERATOR_NAME}/hazelcast.yaml


      - name: Upload Hazelcast-enterprise-operator files
        uses: actions/upload-artifact@v2
        with:
          name: hazelcast-operator
          path: ./hazelcast-enterprise-operator


      - name: Set up Kubernetes in Docker
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.7.0"


      - name: Deploy Hazelcast Cluster
        run: |
          cd ./${OPERATOR_NAME}

          kind load docker-image ${OPERATOR_IMAGE}

          kubectl apply -f operator-rbac.yaml
          kubectl apply -f hazelcast-rbac.yaml
          kubectl apply -f hazelcastcluster.crd.yaml
          kubectl --validate=false apply -f operator-docker-hub.yaml

          #PUT LICENCE KEY IN secret.yaml
          LICENSE_KEY=$(echo -n "${HZ_ENTERPRISE_LICENSE}" | base64 -w 0)
          sed -i -e  "s/key: <base64-hz-license-key>/key: ${LICENSE_KEY}/g" ./secret.yaml
          kubectl apply -f secret.yaml
          
          #WAIT FOR OPERATOR TO BE READY
          kubectl wait --for=condition=Ready --timeout=90s pod -l app.kubernetes.io/name=${OPERATOR_NAME}

          kubectl apply -f hazelcast.yaml
        

      - name: Print log of the Hazelcast-Enterprise-Operator
        run: |
          kubectl logs -l app.kubernetes.io/name=${OPERATOR_NAME}


      - name: Validate Cluster Size
        run: |
          HZ_NAME=$(grep -m 1 -Po "name: \K.+" ./${OPERATOR_NAME}/hazelcast.yaml)
          
          #WAIT FOR hz-hazelcast-enterprise-2 TO BE READY
          for i in `seq 1 10`; do
            if [[ $(kubectl get pods ${HZ_NAME}-${NAME}-2 -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; then
              echo "waiting for pod ${HZ_NAME}-${NAME}-2 to be ready..." && sleep 15
              if [ "$i" = "10" ]; then
                echo "${HZ_NAME}-${NAME}-2 pod failed to be ready!"
                kubectl get pods
                echo ""
                kubectl logs ${HZ_NAME}-${NAME}-2
                exit 1
              fi
            else
              echo "${HZ_NAME}-${NAME}-2 is ready!"
              break
            fi
          done

          #WAIT FOR CLUSTER SIZE TO BE 3
          for i in `seq 1 5`; do
            num=$(kubectl logs ${HZ_NAME}-${NAME}-2 | grep "Members {size:3, ver:3}" | wc -l)
            if [ "$num" = "1" ]; then
              echo "Hazelcast cluster size is 3!"
              break
            else
              echo "Waiting for cluster size to be 3..." && sleep 4
              if [ "$i" = "5" ]; then
                echo "Hazelcast cluster size is not 3!"
                kubectl get pods
                echo ""
                kubectl logs ${HZ_NAME}-${NAME}-2 
                exit 1 
              fi
            fi
          done

          #CHECK IF ALL MEMBERS CAN COMMUNICATE WITH MANAGEMENT CENTER
          for i in `seq 1 5`; do
            MEMBER_COUNT=$(kubectl logs ${HZ_NAME}-${NAME}-mancenter-0 | grep -E "Started communication with (a new )?member" | wc -l)
            if [ "$MEMBER_COUNT" = "3" ]; then
              echo "Management Center monitoring 3 members!"
              break
            else
              echo "Waiting for management center to find all 3 members..." && sleep 4
              if [ "$i" = "5" ]; then
                echo "Management center could not find all 3 members!"
                kubectl get pods
                echo ""
                kubectl logs ${HZ_NAME}-${NAME}-mancenter-0
                exit 1 
              fi
            fi
          done


      - name: Copy rhel-operator-bundle from the repo
        run: |
          cp -r ./operator-repo/.github/operator-release-files/rhel-operator-bundle  ./


      - name: Build Operatorhub Bundle
        working-directory: .
        run: |
          RELEASE_DATE="$(date +%F)T11:59:59Z"
          
          cd rhel-operator-bundle
          mkdir ${OPERATOR_VERSION}

          cp hazelcast-enterprise-operator.vOPERATOR_VERSION.clusterserviceversion.yaml ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          cp hazelcastenterprises.hazelcast.com.crd.yaml ${OPERATOR_VERSION}/
          cp hazelcast-enterprise-operator.package-template.yaml hazelcast-enterprise-certified.package.yaml

          sed -i "s/PREVIOUS_OPERATOR_VERSION/${PREVIOUS_OPERATOR_VERSION}/g" ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          sed -i "s/OPERATOR_VERSION/${OPERATOR_VERSION}/g" ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          sed -i "s/HAZELCAST_IMAGE_VERSION/${DEFAULT_HAZELCAST_VERSION}/g" ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          sed -i "s/MANCENTER_IMAGE_VERSION/${DEFAULT_MANCENTER_VERSION}/g" ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          sed -i "s/RELEASE_DATE/${RELEASE_DATE}/g" ${OPERATOR_VERSION}/hazelcast-enterprise-operator.v${OPERATOR_VERSION}.clusterserviceversion.yaml
          sed -i "s/OPERATOR_VERSION/${OPERATOR_VERSION}/g" hazelcast-enterprise-certified.package.yaml

          echo "Creating bundle artifacts..."
          /opm alpha bundle generate -d ./${OPERATOR_VERSION}/ -u ./${OPERATOR_VERSION}/
          cat >> ./bundle.Dockerfile <<EOL
          LABEL com.redhat.openshift.versions="v4.5,v4.6"
          LABEL com.redhat.delivery.operator.bundle=true
          LABEL com.redhat.delivery.backport=true
          EOL
          
          echo "Building the RHEL-bundle image..."
          docker build -t ${RHEL_BUNDLE_IMAGE} -f bundle.Dockerfile .
          docker images
      
      - name: Upload Operator-Bundle 
        uses: actions/upload-artifact@v2
        with:
          name: hz-enterprise-operator-bundle
          path: ./rhel-operator-bundle


      - name: Push Operator-Bundle image to RHEL scan registry
        run: |
          # echo "Pushing the image to RHEL Registry..."
          # docker login scan.connect.redhat.com -u unused -p ${RHEL_BUNDLE_PASSWORD}
          # docker push ${RHEL_BUNDLE_IMAGE}
          
          # BUNDLE_PROJECT_ID=$( echo ${RHEL_BUNDLE_REPOSITORY} | grep -m 1 -Po "/\K.+(?=/)" )
          # ./operator-repo/.github/publish.rhel.sh ${RHEL_API_KEY} ${BUNDLE_PROJECT_ID} ${OPERATOR_VERSION}
          

      - name: Push Hazelcast-Enterprise-Operator image to RHEL scan registry
        run: |
          # docker login scan.connect.redhat.com -u unused -p ${RHEL_REPO_PASSWORD}
          # docker tag ${OPERATOR_IMAGE} ${RHEL_IMAGE}
          # docker push ${OPERATOR_IMAGE}

          
      - name: Publish the Hazelcast-Enterprise-Operator image
        run: |
          # PROJECT_ID=$( echo ${RHEL_REPOSITORY} | grep -m 1 -Po "/\K.+(?=/)" )
          # ../operator-repo/.github/publish.rhel.sh ${RHEL_API_KEY} ${PROJECT_ID} ${OPERATOR_VERSION}


      - name: Update Hazelcast Versions in the Repo
        working-directory: ./hazelcast-repo
        run: |
          # RESGISTRY_NAME=registry.connect.redhat.com/hazelcast
          # sed -i -e  "s|image: ${REGISTRY_NAME}/${OPERATOR_NAME}:.*|image: ${REGISTRY_NAME}/${OPERATOR_NAME}:${OPERATOR_VERSION}|" ./${OPERATOR_NAME}/operator-rhel.yaml
          # sed -i -e  "s/productVersion: .*/productVersion: ${OPERATOR_VERSION}/g" ./${OPERATOR_NAME}/operator-docker-hub.yaml
          
          # sed -i -e "0,/tag: .*/s//tag: ${DEFAULT_HAZELCAST_VERSION}/" ./${OPERATOR_NAME}/hazelcast.yaml
          # sed -i -e "0,/tag: /! s/tag: .*/tag: ${DEFAULT_MANCENTER_VERSION}/" ./${OPERATOR_NAME}/hazelcast.yaml

          # sed -i -e "0,/tag: .*/s//tag: \"${DEFAULT_HAZELCAST_VERSION}\"/" ./${OPERATOR_NAME}/hazelcast-full.yaml
          # sed -i -e "0,/tag: /! s/tag: .*/tag: ${DEFAULT_MANCENTER_VERSION}/" ./${OPERATOR_NAME}/hazelcast.yaml


      - name: Commit changes done to hazelcast-operator
        run: |
          # git config --global user.name 'devOpsHazelcast'
          # git config --global user.email 'devops@hazelcast.com'
          # git commit -am "Hazelcast-Enterprise-Operator is updated to version: ${OPERATOR_VERSION}. New operator and operator-bundle images are released on RHEL registry."


      - name: Push changes done to hazelcast-operator
        run: |
          # `git push